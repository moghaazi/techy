generator client {
     provider = "prisma-client-js"
}

datasource db {
     provider = "mongodb"
     url      = env("DATABASE_URL")
}

model Account {
     id                String  @id @default(cuid()) @map("_id")
     userId            String
     type              String
     provider          String
     providerAccountId String
     refresh_token     String?
     access_token      String?
     expires_at        Int?
     token_type        String?
     scope             String?
     id_token          String?
     session_state     String?

     user User @relation(fields: [userId], references: [id], onDelete: Cascade)

     @@unique([provider, providerAccountId])
}

model Session {
     id           String   @id @default(cuid()) @map("_id")
     sessionToken String   @unique
     userId       String
     expires      DateTime
     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
     id            String    @id @default(cuid()) @map("_id")
     name          String?
     email         String    @unique
     emailVerified DateTime?
     image         String?
     accounts      Account[]
     sessions      Session[]
     Post          Posts[]
     Comment       Comment[]
}

model VerificationToken {
     identifier String   @id @map("_id")
     token      String   @unique
     expires    DateTime

     @@unique([identifier, token])
}

model Tags {
     id    String  @id @default(cuid()) @map("_id")
     slug  String  @unique
     title String
     Posts Posts[]
}

model Posts {
     id             String    @id @default(cuid()) @map("_id")
     date           DateTime  @default(now())
     slug           String    @unique
     title          String
     desc           String
     img            String?
     views          Int       @default(0)
     likes          Int       @default(0)
     tagSlug        String
     tag            Tags      @relation(fields: [tagSlug], references: [slug])
     userEmail      String
     user           User      @relation(fields: [userEmail], references: [email])
     comments       Comment[]
}

model Comment {
     id        String   @id @default(cuid()) @map("_id")
     date      DateTime @default(now())
     desc      String
     userEmail String
     user      User     @relation(fields: [userEmail], references: [email])
     postSlug  String
     post      Posts    @relation(fields: [postSlug], references: [slug])
}
